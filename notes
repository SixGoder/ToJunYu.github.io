<p>我的猫咪脾气火爆</p>
<p> 开始标签  </p> 结束标签
第一行代码整体称作为 元素*****而“我的猫咪脾气火爆”则作为 内容

<em>刀枪剑戟 斧钺钩叉</em>
输出内容的相应斜体

自由性极高的嵌套
<p>我的猫咪脾气火<strong>爆</strong>:)</p>
如果进行了错误的操作，浏览器会进行猜测，可能输出错误的东西

块级元素和内联元素
<em>第一</em><em>第二</em><em>第三</em>
输出——> 斜体的 “第一第二第三”
<p>第四</p><p>第五</p><p>第六</p>
输出——> 
第四
第五
第六
<em>是一个内联元素，不会导致换行和间隙
<p>是一个块级元素，导致换行输出

空元素
不是所有元素都拥有开始标签，内容，结束标签。一些元素只有一个标签，通常用来在此元素所在位置插入/嵌入一些东西。
<img src="https://raw.githubusercontent.com/mdn/beginner-html-site/gh-pages/images/firefox-icon.png">
元素<img>是用来在元素<img>所在位置插入一张指定的图片。

属性
属性包含元素的额外信息，这些信息不会出现在实际的内容中。
<p class="editor-note">我的猫咪脾气火爆：）</p>
这个class属性给元素赋了一个识别的名字（id），这个名字此后可以被用来识别此元素的样式信息和其他信息。

一个属性必须包含如下内容：
一个空格，在属性和元素名称之间。(如果已经有一个或多个属性，就与前一个属性之间有一个空格。)
属性名称，后面跟着一个等于号。
一个属性值，由一对引号“ ”引起来。

另一个例子是关于元素<a>的——元素<a>是锚，它使被标签包裹的内容成为一个超链接。
此元素也可以添加大量的属性，其中几个如下：
href: 这个属性声明超链接的web地址，当这个链接被点击浏览器会跳转至href声明的web地址。
例如：href="https://www.mozilla.org/"。
title: 标题title属性为超链接声明额外的信息，比如你将链接至的那个页面。
例如：title="The Mozilla homepage"。
当鼠标悬停在超链接上面时，这部分信息将以工具提示的形式显示。
target: 目标target属性用于指定链接如何呈现出来。
例如，target="_blank"将在新标签页中显示链接。如果你希望在当前标签页显示链接，忽略这个属性即可。

布尔属性
有时你会看到没有值的属性，它是合法的。
这些属性被称为布尔属性，他们只能有跟它的属性名一样的属性值。
<!-- 使用disabled属性来防止终端用户输入文本到输入框中 -->
<input type="text" disabled>
<!-- 下面这个输入框没有disabled属性，所以用户可以向其中输入 -->
<input type="text">

<!DOCTYPE html>是最短的有效的文档声明。
<html></html>: <html>元素。
这个元素包裹了整个完整的页面，是一个根元素。
<head></head>: <head>元素. 
这个元素是一个容器，它包含了所有你想包含在HTML页面中但不想在HTML页面中显示的内容。
这些内容包括你想在搜索结果中出现的关键字和页面描述，CSS样式，字符集声明等等。
<meta charset="utf-8">: 这个元素设置文档使用utf-8字符集编码，utf-8字符集包含了人类大部分的文字。
基本上他能识别你放上去的所有文本内容。毫无疑问要使用它，并且它能在以后避免很多其他问题。
<title></title>: 设置页面标题，出现在浏览器标签上，当你标记/收藏页面时它可用来描述页面。
<body></body>: <body>元素。
包含了你访问页面时所有显示在页面上的内容，文本，图片，音频，游戏等等。
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>我的测试站点</title>
  </head>
  <body>
    <p>这是我的页面</p>
  </body>
</html>

在我们的HTML代码中，我们让每一个嵌套的元素以两个空格缩进。 
你使用什么风格来格式化你的代码取决于你 (比如所对于每层缩进使用多少个空格),但是你应该坚持使用某种风格。

HTML注释
注释是被浏览器忽略的，而且是对用户不可见的。
它们的目的是允许你描述你的代码是如何工作的和不同部分的代码做了什么等等。
为了将一段HTML中的内容置为注释，你需要将其用特殊的记号<!--和-->包括起来：
<p>我在注释外！</p>
<!-- <p>我在注释内！</p> -->

HTML 头部是包含在 <head> 元素里面的内容。
不像 <body> 元素的内容会显示在浏览器中，head 里面的内容不会在浏览器中显示，它的作用是包含一些页面的元数据。

增加一个标题
我们之前已经了解过 <title>，它可以用来给 html 文档添加一个标题。
你可能会将它和给 body 添加标题的 <h1> 元素混淆，有些时候 h1 也会被称作网页标题。
当被加载到浏览器中的时候，元素 <h1>  会出现在页面中 —— 通常它应该在一个页面中只被使用一次。
它被用来标记你的页面内容的标题（故事的标题，新闻标题或者任何适当的方式）。
元素 <title> 是用来表示整个HTML文档标题的元数据（不是文档的内容）

元数据：<meta>元素
元数据就是描述数据的数据，而HTML有一个“官方的”方式来为一个文档添加元数据——  <meta> 元素。
有很多不同种类的 <meta> 元素可以被包含进你的页面的<head>元素。
但是现在我们还不会尝试去解释所有类型，这只会引起混乱。

添加作者和描述
许多<meta> 元素包含了name 和 content 特性：
name 指定了meta 元素的类型； 说明该元素包含了什么类型的信息。
content 指定了实际的元数据内容。

在你的站点增加自定义图标
为了进一步丰富你的网站设计，你可以在元数据中添加对自定义图标的引用。
这些将在特定的场合中显示。
这个不起眼的图标已经存在很多很多年了，16 x 16 像素是这种图标的第一种类型。
你可以看见这些图标出现在浏览器每一个打开的页面中的标签页中中以及在书签面板中的书签页面中。
页面添加图标的方式有：
将其保存在与网站的索引页面相同的目录中，以.ico格式保存（大多数浏览器将支持更通用的格式。
如.gif或.png。
但使用ICO格式将确保它能在如Internet Explorer 6一样久远的浏览器显示）
将以下行添加到HTML <head>中以引用它：
<link rel="shortcut icon" href="favicon.ico" type="image/x-icon">

在HTML中应用CSS和JavaScript
如今，几乎你使用的所有网站都会使用 CSS 让网页更加炫酷。
使用JavaScript让网页有交互功能，比如视频播放器，地图，游戏以及更多功能。
这些应用在网页中很常见，它们分别使用 <link>元素以及 <script> 元素。
<link> 元素经常位于文档的头部。
这个link元素有2个属性，rel="stylesheet"表明这是文档的样式表，而 href包含了样式表文件的路径：
<link rel="stylesheet" href="my-css-file.css">
<script> 部分没必要非要放在文档头部；
实际上，把它放在文档的尾部（在 </body>标签之前）是一个更好的选择。
这样可以确保在加载脚本之前浏览器已经解析了HTML内容（如果脚本加载某个不存在的元素，浏览器会报错）。
<script src="my-js-file.js"></script>
<script>元素看起来像一个空元素，但它并不是，因此需要一个结束标记。
您还可以选择将脚本放入<script>元素中，而不是指向外部脚本文件。
 
为文档设定主语言
值得一提的是你可以（而且确实应该）为你的站点设定语言。
这个可以通过添加lang属性到HTML开始标签中来实现 (参考 meta-example.html)，如下所示：
<html lang="en-US">
en-US 英国(美国)
zh-CN 中文(简体，中国大陆)
zh-SG 中文(简体，新加坡)
zh-HK 中文(繁体，香港)
zh-MO 中文(繁体，澳门)
zh-TW 中文(繁体，台湾)
在很多方面都很有用。
如果你的HTML文档的语言设置好了，那么你的HTML文档就会被搜索引擎更有效地索引 
(例如，允许它在特定于语言的结果中正确显示)。
对于那些使用屏幕阅读器的视障人士也很有用(比如， 法语和英语中都有“six”这个单词，但是发音却完全不同)。
你还可以将文档的分段设置为不同的语言。例如，我们可以把日语部分设置为日语，如下所示：
<p>Japanese example: <span lang="jp">ご飯が熱い。</span>.</p>

基础: 标题和段落
大部分的文本结构由标题和段落组成。 不管是小说、报刊、教科书还是杂志等。
在HTML中，每个段落是通过 <p> 元素标签进行定义的, 比如下面这样：
<p>我是一个段落，千真万确。</p>
每个标题（Heading）是通过“标题标签”进行定义的：
<h1>我是文章的标题</h1>
这里有六个标题元素标签 —— <h1>、<h2>、<h3>、<h4>、<h5>、<h6>。
每个元素代表文档中不同级别的内容;
<h1> 表示主标题（the main heading），
<h2> 表示二级子标题（subheadings），
<h3> 表示三级子标题（sub-subheadings），等等。

在一个故事中，<h1>表示故事的名字，<h2>表示每个章节的标题， <h3>表示每个章节下的子标题，以此类推。

所涉及的元素具体代表什么，完全取决于作者编辑的内容，只要层次结构是合理的。
在创建此类结构时，您只需要记住一些最佳实践：
您应该最好只对每个页面使用一次<h1> — 这是顶级标题，所有其他标题位于层次结构中的下方。
请确保在层次结构中以正确的顺序使用标题。
不要使用<h3>来表示副标题，后面跟<h2>来表示副副标题 - 这是没有意义的，会导致奇怪的结果。
在可用的六个标题级别中，您应该旨在每页使用不超过三个，除非您认为有必要使用更多。
具有许多级别的文档（即，较深的标题层次结构）变得难以操作并且难以导航。
在这种情况下，如果可能，建议将内容分散在多个页面上。

为什么我们需要结构化?
没有元素给内容结构，所以浏览器不知道什么是标题，什么是段落。此外：
用户在阅读网页时，往往会快速浏览以查找相关内容，经常只是阅读开头的标题.
（我们通常在一个网页上会花费很少的时间 spend a very short time on a web page)。
如果用户不能在几秒内看到一些有用的内容，他们很可能会感到沮丧并离开。
对您的网页建立索引的搜索引擎将标题的内容视为影响网页搜索排名的重要关键字。
没有标题，您的网页在SEO（搜索引擎优化）方面效果不佳。
严重视力障碍者通常不会阅读网页；他们用听力来代替。
完成这项工作的软件叫做屏幕阅读器（screen reader）。
该软件提供了快速访问给定文本内容的方法。
在使用的各种技术中，它们通过朗读标题来提供文档的概述，让用户能快速找到他们需要的信息。
如果标题不可用，用户将被迫听到整个文档的大声朗读。
使用CSS样式化内容，或者使用JavaScript做一些有趣的事情.
你需要包含相关内容的元素，所以CSS / JavaScript可以有效地定位它。
因此，我们需要给我们的内容结构标记。

实践操作: 编辑我们的内容结构

为什么我们需要语义？
在我们身边的任何地方都要依赖语义学 — 我们依靠以前的经验就知道日常事物都代表什么；
当我们看到什么，我们就会知道它代表什么。
举个例子, 我们知道红色交通灯表示“停止”，绿色交通灯表示”通行“。
如果运用了错误的语义，事情会迅速地变得非常棘手 (难道有某个国家使用红色代表通行？我不希望如此)

同样的道理，我们需要确保使用了正确的元素来给予内容正确的意思、作用以及外形。
在这里，<h1> 元素也是一个语义元素，它给出了包裹在您的页面上用来表示顶级标题的角色（或意义）的文本。
<h1>这是一个顶级标题</h1>
一般来说，浏览器会给它一个更大的字形来让它看上去像个标题。
虽然你可以使用CSS让它变成任何你想要的样式。
更重要的是，它的语义值将以多种方式被使用，比如通过搜索引擎和屏幕阅读器（上文提到过的）。
在另一方面，你可以让任一元素看起来像一个顶级标题，如下：
<span style="font-size: 32px; margin: 21px 0;">这是顶级标题吗？</span>
这是一个 <span> 元素，它没有语义。
当您想要对它用CSS（或者JS）时，您可以用它包裹内容，且不需要附加任何额外的意义。
在未来的课程中你会发现更多这类元素。
然而，由于它没有语义值，所以它不会有任何上文提到的帮助。
最好的方法是使用相关的HTML元素来标记这个项目。

列表 Lists
现在，让我们注意一下列表。
列表在生活中随处可见——从你的购物清单到你的回家路线方案列表，再到你遵从的教程说明列表。
在网络上，列表也到处存在，我们需要学习三种不同类型的列表。

无序 Unordered
无序的列表被用来标记每个项目。
在这里，项目的顺序并不重要 — 让我们看下面的早点清单的例子。
每份无序的清单从 <ul> 元素开始——这元素包裹了清单上所有被列出的项目：
<ul>
豆浆
油条
豆汁
焦圈
</ul>
最后一步就是用 <li> 元素把每个列出的项目分别包裹起来：
<ul>
  <li>豆浆</li>
  <li>油条</li>
  <li>豆汁</li>
  <li>焦圈</li>
</ul>

有序 Ordered
有序的列表是根据项目的顺序列出来的——让我们以一组方向为例：
沿着条路走到头
右转
直行穿过第一个十字路口
在第三个十字路口处左转
继续走 300 米，学校就在你的右手边
这个标记的结构和无序列表一样，除了你需要用<ol> 元素将所有项目包裹, 而不是用<ul>：
<ol>
<li>沿着条路走到头</li>
<li>右转</li>
<li>直行穿过第一个十字路口</li>
<li>在第三个十字路口处左转</li>
<li>继续走 300 米，学校就在你的右手边</li>
</ol>

实践操作: 标记我们的食谱

嵌套列表 Nesting lists
将一个列表嵌入到另一个列表是完全可以的。
你可能想让一些子项目列在首项目之下。让我们从食谱示例中获取第二个列表：
由于最后两项与它们的前一项非常密切相关（它们看起来更像该项的子项或选项）。
将它们编辑成无序列表，并嵌套在该项的子项中可能更合理。

重点强调
在人类语言中。
为了突出一句话的意思，我们通常强调某些词。
并且我们通常想要标记某些词作为重点或者在某种程度上的不同。
HTML 提供了许多语义化的元素，并且允许我们通过这些元素的意义标记正文内容。
在这个章节中，我们将看到最常见的一小部分元素。
强调
当我们想要在口语中添加强调，我们重读某些词，以便隐含的说出我们想要说的意思。
类似的，在写作中，我们通过将文字写成斜体来强调它。比如，接下来的两个句子就有不同的含义.
I am glad you weren't late.
I am glad you weren't late. (ps: 此句中"glad"和"late"为斜体字体)
第一句话听起来真的像松了一口气因为没有迟到。
相反，第二句话听起来具有讽刺性而且有隐含的攻击性，表达对一个人迟到的恼怒。
在HTML中我们用<em>（emphasis）元素来标记这样的情况。
这样做既可以让文档读起来更有趣，也可以被屏幕阅读器识别出来，并以不同的语调发出。
浏览器默认风格为斜体，但你不应该纯粹使用这个标签来获得斜体风格。
为了获得斜体风格，你应该使用<span>元素和一些CSS，或者是<i>元素（见下文）。
<p>I am <em>glad</em> you weren't <em>late</em>.</p>

非常重要
为了强调重要的词，在口语方面我们往往用重音强调，在文字方面则是用粗体字来达到强调的效果。
This liquid is highly toxic.
I am counting on you. Do not be late!
在HTML中我们用<strong> (strong importance) 元素来标记这样的请况。
这样做既可以让文档更加地有用，也可以被屏幕阅读器识别出来，并以不同的语调发出。
浏览器默认风格为粗体，但你不应该纯粹使用这个标签来获得粗体风格。
为了获得粗体风格，你应该使用<span>元素和一些CSS，或者是 <b> 元素 (见下文)。
<p>This liquid is <strong>highly toxic</strong>.</p>
<p>I am counting on you. <strong>Do not</strong> be late!</p>
如有需要你可以将strong元素和em元素嵌套在其他的标签中：

斜体字、粗体字、下划线...
迄今为止我们已经讨论的元素都是意义清楚的语义元素。
<b>, <i>, 和 <u> 的情况却有点复杂。
它们出现于人们要在文本中使用粗体、斜体、下划线但CSS仍然不被完全支持的时期。
像这样的元素，仅仅影响表象而且没有语义，被称为表象元素（presentational elements）。
并且不应该再被使用。
因为正如我们在之前看到的，语义对可访问性，SEO（搜索引擎优化）等非常重要。
HTML5用新的语义规则重新定义了<b>,<i>和<u>,稍微有点混乱。
这里是最好的经验法则：
使用<b>,<i>,<u> 来传达传统意义上的粗体，斜体或下划线是合适的，没有其他元素更适合这样用了。
然而，始终拥有可访问性的思维模式是至关重要的。
斜体的概念对人们使用屏幕阅读器是没有帮助的.
对使用其他书写系统而不是拉丁文书写系统的人们也是没有帮助的。
<i> 被用来传达传统上用斜体表达的意义：外国文字，分类名称，技术术语，一种思想……
<b> 被用来传达传统上用粗体表达的意义：关键字，产品名称，引导句……
<u> 被用来传达传统上用下划线表达的意义：专有名词，拼写错误……

一种关于下划线的警告：人们很容易把下划线和超链接联系起来。
因此，在Web上，最好只在链接上使用下划线。
当语义适合时使用<u>元素，但是有时候在Web上用CSS改变下划线默认的的样式更加合适。
下面的例子说明了如何做。

超链接非常重要 ——它们使互联网成为一个互联的网络。
本文介绍了创建链接所需的语法，并且讨论了链接的最佳实现方法。
学习如何实现一个有效地把多个文件链接在一起的超文本链接。

超链接是互联网提供的最令人兴奋的创新之一。
它们从一开始就一直是互联网的一个特性，使互联网成为互联的网络。
超链接使我们能够将我们的文档链接到任何其他文档（或其他资源），也可以链接到文档的指定部分。
我们可以在一个简单的网址上提供应用程序（与必须先安装的本地应用程序或其他东西相比）。
几乎任何网络内容都可以转换为链接，点击（或激活）超链接将使网络浏览器转到另一个网址（URL）。

URL可以指向HTML文件、文本文件、图像、文本文档、视频和音频文件以及可以在网络上保存的任何其他内容。
如果浏览器不知道如何显示或处理文件，它会询问您是否要打开文件（需要选择合适的本地应用来打开或处理文件）或下载文件（以后处理它）。
例如，BBC 主页包含大量的链接。
有些链接指向多个新闻故事；
有些链接指向网站的不同区域（导航功能）；
还有些链接指向登录/注册页面（用户工具）等等。

通过将文本（或其他内容，见块级链接)转换为<a>元素内的链接来创建基本链接.
给它一个href属性（也称为目标），它将包含您希望链接指向的网址。
<p>I'm creating a link to
<a href="https://www.mozilla.org/en-US/">the Mozilla homepage</a>.
</p>

使用title属性添加支持信息
您可能要添加到您的链接的另一个属性是标题；
这旨在包含关于链接的补充有用信息，例如页面包含什么样的信息或需要注意的事情。 
<p>I'm creating a link to
<a href="https://www.mozilla.org/en-US/"
   title="The best place to find more information about Mozilla's
          mission and how to contribute">the Mozilla homepage</a>.
</p>

结果如下（当鼠标指针悬停在链接上时，标题将作为提示信息出现）：
I'm creating a link to the Mozilla homepage.
注意：链接的标题仅当鼠标悬停在其上时才会显示，这意味着使用键盘来导航网页的人很难获取到标题信息。
如果标题信息对于页面非常重要，你应该使用所有用户能都方便获取的方式来呈现，例如放在常规文本中。

主动学习：创建您自己的示例链接

块级链接
如上所述，你可以将一些内容转换为链接，甚至是块级元素。
例如你想要将一个图像转换为链接，你只需把图像元素放到<a></a>标签中间。
<a href="https://www.mozilla.org/en-US/">
  <img src="mozilla-image.png" alt="mozilla logo that links to the mozilla homepage">
</a>

统一资源定位符(URL)与路径(path)快速入门
要全面地了解链接目标，你需要了解统一资源定位符和文件路径。
统一资源定位符（英文：Uniform Resource Locator，简写：URL）。
是一个定义了在网络上的位置的一个文本字符串。
例如Mozilla的英文主页定位在https://www.mozilla.org/en-US/.
URL使用路径查找文件。路径指定文件系统中您感兴趣的文件所在的位置。
此目录结构的根目录称为creation-hyperlinks。
当在网站上工作时， 你会有一个包含整个网站的目录。
在根目录，我们有一个index.html和一个contacts.html文件。
在真实的网站上，index.html 将会成为我们的主页或登录页面。
我们的根目录还有两个目录—— pdfs 和projects。
它们分别包含一个 PDF (project-brief.pdf) 文件和一个index.html 文件。
请注意你可以有两个index.html文件，前提是他们在不同的目录下，许多网站就是如此。
第二个index.html或许是项目相关信息的主登录界面。

指向当前目录：
如果index.html（目录顶层的index.html）想要包含一个超链接指向contacts.html，
你只需要指定想要链接的文件名，因为它与当前文件是在同一个目录的. 
所以你应该使用的URL是contacts.html:
<p>Want to contact a specific staff member?
Find details on our <a href="contacts.html">contacts page</a>.</p>
指向子目录：
如果index.html （目录顶层index.html）想要包含一个超链接指向 projects/index.html，
您需要先进入projects/项目目录，然后指明要链接到的文件index.html。 
通过指定目录的名称，然后是正斜杠，然后是文件的名称。
因此您要使用的URL是projects/index.html：
<p>Visit my <a href="projects/index.html">project homepage</a>.</p>
指向上级目录：
如果你想在projects/index.html中包含一个指向pdfs/project-brief.pdf的超链接，
你必须先返回上级目录，然后再回到pdf目录。
“返回上一个目录级”使用两个英文点号表示 — .. — 所以你应该使用的URL是 ../pdfs/project-brief.pdf：
<p>A link to my <a href="../pdfs/project-brief.pdf">project brief</a>.</p>
如果需要的话，你可以将这些功能的多个例子和复杂的url结合起来。
例如：../../../complex/path/to/my/file.html.

文档片段
超链接除了可以链接到文档外，也可以链接到HTML文档的特定部分（被称为文档片段）。
要做到这一点，你必须首先给要链接到的元素分配一个id属性。
例如，如果你想链接到一个特定的标题，可以这样做：
<h2 id="Mailing_address">Mailing address</h2>
然后链接到那个特定的id，您可以在URL的结尾使用一个井号指向它，例如：
<p>Want to write us a letter? Use our <a href="contacts.html#Mailing_address">mailing address</a>.</p>
你甚至可以在同一份文档下，通过链接文档片段，来链接到同一份文档的另一部分：
<p>The <a href="#Mailing_address">company mailing address</a> can be found at the bottom of this page.</p>

绝对URL和相对URL
你可能会在网络上遇到两个术语，绝对URL和相对URL（或者称为，绝对链接和相对链接）：
绝对URL：
指向由其在Web上的绝对位置定义的位置，包括 protocol(协议) and domain name（域名）.。
像下面的例子,如果index.html 页面上传到projects这一个目录 。
并且projects目录位于web服务站点的根目录, web站点的域名为http://www.example.com, 
那么这个页面就可以通过http://www.example.com/projects/index.html访问 
( 或者通过http://www.example.com/projects/来访问, 
因为在没有指定特定的URL的情况下，大多数web服务会默认访问加载index.html这类页面)
不管绝对URL在哪里使用，它总是指向确定的相同位置。

相对URL：
指向与您链接的文件相关的位置，更像我们在前面一节中所看到的位置。
例如，
如果我们想从示例文件链接http://www.example.com/projects/index.html转到相同目录下的一个PDF文件, 
URL就是文件名URL — 例如 project-brief.pdf —没有其他的信息要求. 
如果PDF文件能够在projects的子目录pdfs中访问到, 
相对路径就是pdfs/project-brief.pdf
(对应的绝对URL就是 http://www.example.com/projects/pdfs/project-brief.pdf.)
一个相对URL将指向不同的位置，这取决于它所在的文件所在的位置
例如，
如果我们把index.html 文件 从 projects 目录移动出来并进入Web站点的根目录
（最高级别，而不是任何目录中）， 
pdfs/project-brief.pdf 的相对URL将会指向http://www.example.com/pdfs/project-brief.pdf,
而不是http://www.example.com/projects/pdfs/project-brief.pdf.

链接最佳实践
在写链接时有一些最好的做法。现在让我们看看这些。
用清晰的链接措辞
把链接放在你的页面上很容易。
这还不够。
我们需要让所有的读者都可以使用链接，不管他们当前的环境和哪些工具。
例如：
使用屏幕阅读器的用户喜欢从页面上的一个链接跳到另一个链接，并且脱离上下文来阅读链接。
搜索引擎使用链接文本来索引目标文件，
所以在链接文本中包含关键词是一个很好的主意，以有效地描述与之相关的信息。
读者往往会浏览页面而不是阅读每一个字，他们的眼睛会被页面的特征所吸引，比如链接。
他们会找到描述性的链接。
让我们来看一个具体的例子：
<p><a href="https://firefox.com/">
  下载Firefox
</a></p>

<p><a href="https://firefox.com/">
  点击这里
</a>
下载Firefox</p>

其他提示：
不要重复URL作为链接文本的一部分 ——URL看起来很丑，
当屏幕朗读器一个字母一个字母的读出来的时候听起来就更丑了。
不要在链接文本中说“链接”或“链接到”——它只是噪音。
屏幕阅读器告诉人们有一个链接。可视化用户也会知道有一个链接，
因为链接通常是用不同的颜色设计的，并且存在下划线（这个惯例一般不应该被打破，因为用户习惯了它。）
保持你的链接标签尽可能短——长链接尤其惹恼屏幕阅读器用户，他们必须听到整件事读出来。

尽可能使用相对链接
从上面的描述中，您可能认为始终使用绝对链接是一个好主意；
毕竟，当页面像相对链接那样移动时，它们不会中断。
但是，当链接到同一网站的其他位置时，
你应该使用相对链接（当链接到另一个网站时，你需要使用绝对链接）：

首先，检查代码要容易得多——相对URL通常比绝对URL短得多，这使得阅读代码更容易。

其次，在可能的情况下使用相对URL更有效。
当使用绝对URL时，浏览器首先通过DNS（见万维网是如何工作的）查找服务器的真实位置，
然后再转到该服务器并查找所请求的文件。
另一方面，相对URL，浏览器只在同一服务器上查找被请求的文件。
因此，如果你使用绝对URL而不是相对URL，
你就会不断地让你的浏览器做额外的工作，这意味着它的效率会降低。

链接到非HTML资源 ——留下清晰的指示
当链接到一个需要下载的资源（如PDF或Word文档）或流媒体（如视频或音频）或有另一个潜在的意想不到的效果
（打开一个弹出窗口，或加载Flash电影），
你应该添加明确的措辞，以减少任何混乱。

如下的例子会让人反感：
如果你是在低带宽连接，点击一个链接，然后就开始下载大文件。
如果你没有安装Flash播放器，点击一个链接，然后突然被带到一个需要Flash的页面。

让我们看看一些例子，看看在这里可以使用什么样的文本：
<p><a href="http://www.example.com/large-report.pdf">
  下载销售报告（PDF, 10MB）
</a></p>
<p><a href="http://www.example.com/video-stream/">
  观看视频（将在新标签页中播放, HD画质）
</a></p>
<p><a href="http://www.example.com/car-game">
  进入汽车游戏（需要Flash插件）
</a></p>

在下载链接时使用 download 属性
当您链接到要下载的资源而不是在浏览器中打开时，
您可以使用 download 属性来提供一个默认的保存文件名（译注：此属性仅适用于同源URL）。
下面是一个下载链接到Firefox 的 Windows最新版本的示例：
<a href="https://download.mozilla.org/?product=firefox-latest-ssl&os=win64&lang=en-US"
   download="firefox-latest-64bit-installer.exe">
  Download Latest Firefox for Windows (64-bit) (English, US)
</a>

主动学习：创建一个导航菜单
在这个练习中，我们希望你把一些页面和导航菜单链接起来，创建一个多页面的网站。
这是创建网站的一种常见方式——每一页都使用相同的页面结构，
包括相同的导航菜单，所以当链接被点击时，
它给人的印象是你停留在同一个地方，不同的内容正在被提出来。
您需要将以下四页的本地副本放在同一目录中。 
(see the navigation-menu-start directory if you want a the full listing):
index.html
projects.html
pictures.html
social.html
你应该:
在一个页面上的指定位置添加一个无序列表，
其中包含要链接到的页面的名称。
导航菜单通常只是一个链接列表，因此这在语义上是确定的。
将每个页面名称转换为该页的链接。
将导航菜单复制到每个页面。
在每一页上，只删除同一页的链接——
一个页面包含自己的链接是令人困惑和毫无意义的，
而缺少链接会对你当前的页面起到很好的视觉提示作用。

电子邮件链接
当点击一个链接或按钮时，打开一个新的电子邮件发送信息而不是连接到一个资源或页面，
这种情况是可能做到的。
这样做是使用<a>元素和mailto：URL的方案。
其最基本和最常用的使用形式为一个mailto:link （链接），
链接简单说明收件人的电子邮件地址。
例如:
<a href="mailto:nowhere@mozilla.org">Send email to nowhere</a>
这会创建一个链接，看起来像这样： Send email to nowhere.
实际上，邮件地址甚至是可选的。
如果你忘记了（也就是说，你的href仅仅只是简单的"mailto:"），
一个新的发送电子邮件的窗口也会被用户的邮件客户端打开，
只是没有收件人的地址信息，这通常在“分享”链接是很有用的，用户可以发送给他们选择的地址邮件

具体细节
除了电子邮件地址，您还可以提供其他信息。
事实上，任何标准的邮件头字段可以被添加到你提供的邮件URL。 
其中最常用的是主题(subject)、抄送(cc)和主体(body) 
(这不是一个真正的头字段，但允许您为新邮件指定一个短内容消息)。
每个字段及其值被指定为查询项。
下面是一个包含cc、bcc、主题和主体的示例：
<a href="mailto:nowhere@mozilla.org?cc=name2@rapidtables.com&bcc=name3@rapidtables.com&subject=The%20subject%20of%20the%20email&body=The%20body%20of%20the%20email">
  Send mail with cc, bcc, subject and body
</a>

注意: 每个字段的值必须是URL编码的。
也就是说，
不能有非打印字符（不可见字符比如制表符、换行符、分页符）
和空格 percent-escaped. 同时注意使用问号（?）来分隔主URL与参数值，
以及使用&符来分隔mailto:中的各个参数。 这是标准的URL查询标记方法。
阅读 The GET method 以了解哪种URL查询标记方法是更常用的。
这里有一些其他的示例mailto链接：
mailto:
mailto:nowhere@mozilla.org
mailto:nowhere@mozilla.org,nobody@mozilla.org
mailto:nowhere@mozilla.org?cc=nobody@mozilla.org
mailto:nowhere@mozilla.org?cc=nobody@mozilla.org&subject=This%20is%20the%20subject


总结
这就是链接！当您开始查看样式时，您将在稍后的课程中返回链接。


高阶文字排版
在这里你将了解标记引文、描述列表、计算机代码和其他相关文本、下标和上标、联系信息等。

描述列表
在 HTML 基础部分，我们讨论了如何在 HTML 中标记基本的列表，
但是我们没有提到你偶尔会遇到的第三种类型的列表—描述列表 (description list) 。
这种列表的目的是标记一组项目及其相关描述，
例如术语和定义，或者是问题和答案等。让我们看一组术语和定义的示例：
内心独白
戏剧中，某个角色对自己的内心活动或感受进行念白表演，这些台词只面向观众，而其他角色不会听到。
语言独白
戏剧中，某个角色把自己的想法直接进行念白表演，观众和其他角色都可以听到。
旁白
戏剧中，为渲染幽默或戏剧性效果而进行的场景之外的补充注释念白，只面向观众，内容一般都是角色的感受、想法、以及一些背景信息等。
描述列表使用与其他列表类型不同的闭合标签— <dl>;
此外，每一项都用 <dt> (description term) 元素闭合。
每个描述都用 <dd> (description description) 元素闭合。
让我们来完成下面的标记例子:
<dl>
  <dt>内心独白</dt>
    <dd>戏剧中，某个角色对自己的内心活动或感受进行念白表演，这些台词只面向观众，而其他角色不会听到。</dd>
  <dt>语言独白</dt>
    <dd>戏剧中，某个角色把自己的想法直接进行念白表演，观众和其他角色都可以听到。</dd>
  <dt>旁白</dt>
    <dd>戏剧中，为渲染幽默或戏剧性效果而进行的场景之外的补充注释念白，只面向观众，内容一般都是角色的感受、想法、以及一些背景信息等。</dd>
</dl>

浏览器的默认样式会在描述列表的描述部分（description description）和描述术语（description terms）之间产生缩进。

请注意：一个术语 <dt> 可以同时有多个描述 <dd>，比如说：

引用
HTML也有用于标记引用的特性，至于使用哪个元素标记，取决于你引用的是一块还是一行。
块引用
如果一个块级内容（一个段落、多个段落、一个列表等）从其他地方被引用，
你应该把它用<blockquote>元素包裹起来表示，并且在cite属性里用URL来指向引用的资源。
例如，下面的例子就是引用的MDN的<blockquote>元素页面：
<p>The <strong>HTML <code>&lt;blockquote&gt;</code> Element</strong> (or <em>HTML Block
Quotation Element</em>) indicates that the enclosed text is an extended quotation.</p>

<blockquote cite="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote">
  <p>The <strong>HTML <code>&lt;blockquote&gt;</code> Element</strong> (or <em>HTML Block
  Quotation Element</em>) indicates that the enclosed text is an extended quotation.</p>
</blockquote>
浏览器在渲染块引用时默认会增加缩进，作为引用的一个指示符；
MDN是这样做的，但是也增加了额外的样式：

行内引用
行内元素用同样的方式工作，除了使用<q>元素。例如，下面的标记包含了从MDN<q>页面的引用：
<p>The quote element — <code>&lt;q&gt;</code> — is <q cite="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q">intended
for short quotations that don't require paragraph breaks.</q></p>
浏览器默认将其作为普通文本放入引号内表示引用，就像下面：
The quote element — <q> — is intended for short quotations that don't require paragraph breaks.
(<q>元素旨在用于不需要分段的短引用)
浏览器默认将其作为普通文本放入引号内表示引用，就像下面：
The quote element — <q> — is" intended for short quotations that don't require paragraph breaks".(<q>元素旨在用于不需要分段的短引用)

引文
cite属性内容不会被浏览器显示、屏幕阅读器阅读，
需使用 JavaScript 或 CSS，浏览器才会显示cite的内容。
如果你想要确保引用的来源在页面上是可显示的，更好的方法使用<cite>元素：
<p>According to the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote">
<cite>MDN blockquote page</cite></a>:
</p>

<blockquote cite="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote">
  <p>The <strong>HTML <code>&lt;blockquote&gt;</code> Element</strong> (or <em>HTML Block
  Quotation Element</em>) indicates that the enclosed text is an extended quotation.</p>
</blockquote>

<p>The quote element — <code>&lt;q&gt;</code> — is <q cite="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q">intended
for short quotations that don't require paragraph breaks.</q> -- <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q">
<cite>MDN q page</cite></a>.</p>

引文默认的字体样式为斜体。

缩略语
另一个你在web上看到的相当常见的元素是<abbr>——它常被用来包裹一个缩略语或缩写，
并且提供缩写的解释（包含在title属性中）。
让我们看看下面两个例子：
<p>我们使用 <abbr title="超文本标记语言（Hypertext Markup Language）">HTML</abbr> 来组织网页文档。</p>
<p>第 33 届 <abbr title="夏季奥林匹克运动会">奥运会</abbr> 将于 2024 年 8 月在法国巴黎举行。</p>
这些代码的显示效果如下（当光标移动到项目上时会出现提示）：

Note: 还有另一个元素<acronym>，它基本上与<abbr>相同，
专门用于首字母缩略词而不是缩略语。 然而，这已经被废弃了 - 
它在浏览器的支持中不如<abbr>，并且具有类似的功能，所以没有意义。
只需使用<abbr>。

标记联系方式
HTML有个用于标记联系方式的元素——<address>。它仅仅包含你的联系方式，例如：

<address>
  <p>Chris Mills, Manchester, The Grim North, UK</p>
</address>

但要记住的一点是，<address>元素是为了标记编写HTML文档的人的联系方式，而不是任何其他的内容。
因此，如果这是Chris写的文档，上面的内容将会很好。注意，下面的内容也是可以的：
<address>
  <p>Page written by <a href="../authors/chris-mills/">Chris Mills</a>.</p>
</address>

上标和下标
当你使用日期、化学方程式、和数学方程式时会偶尔使用上标和下标。
<sup> 和<sub>元素可以解决这样的问题。例如：
<p>咖啡因的化学方程式是 C<sub>8</sub>H<sub>10</sub>N<sub>4</sub>O<sub>2</sub>。</p>
<p>如果 x<sup>2</sup> 的值为 9，那么 x 的值必为 3 或 -3。</p>

这些代码输出的结果是：
咖啡因的化学方程式是 C8H10N4O2。
如果 x2 的值为 9，那么 x 的值必为 3 或 -3。
展示计算机代码

展示计算机代码
有大量的HTML元素可以来标记计算机代码：
<code>: 用于标记计算机通用代码。
<pre>: 用于保留空白字符（通常用于代码块）
——如果您在文本中使用缩进或多余的空白，浏览器将忽略它，您将不会在呈现的页面上看到它。
但是，如果您将文本包含在<pre></pre>标签中，
那么空白将会以与你在文本编辑器中看到的相同的方式渲染出来。
<var>: 用于标记具体变量名。
<kbd>: 用于标记输入电脑的键盘（或其他类型）输入。
<samp>: 用于标记计算机程序的输出。

标记时间和日期
HTML 还支持将时间和日期标记为可供机器识别的格式的 <time> 元素。例如：
<time datetime="2016-01-20">2016年1月20日</time>
为什么需要这样做？因为世界上有许多种书写日期的格式，上边的日期可能被写成：
20 January 2016
20th January 2016
Jan 20 2016
20/06/16
06/20/16
The 20th of next month
20e Janvier 2016
2016年1月20日
And so on
但是这些不同的格式不容易被电脑识别 —
假如你想自动抓取页面上所有事件的日期并将它们插入到日历中，
<time> 元素允许你附上清晰的、可被机器识别的 时间/日期来实现这种需求。
上述基本的例子仅仅提供了一种简单的可被机器识别的日期格式，这里还有许多其他支持的格式，例如：
<!-- 标准简单日期 -->
<time datetime="2016-01-20">20 January 2016</time>
<!-- 只包含年份和月份-->
<time datetime="2016-01">January 2016</time>
<!-- 只包含月份和日期 -->
<time datetime="01-20">20 January</time>
<!-- 只包含时间，小时和分钟数 -->
<time datetime="19:30">19:30</time>
<!-- 还可包含秒和毫秒 -->
<time datetime="19:30:01.856">19:30:01.856</time>
<!-- 日期和时间 -->
<time datetime="2016-01-20T19:30">7.30pm, 20 January 2016</time>
<!-- 含有时区偏移值的日期时间 -->
<time datetime="2016-01-20T19:30+01:00">7.30pm, 20 January 2016 is 8.30pm in France</time>
<!-- 调用特定的周 -->
<time datetime="2016-W04">The fourth week of 2016</time>

文档与网站架构
HTML 不仅能够定义网页的单独部分（例如“段落”或“图片”），
还可以使用块级元素（例如“标题栏”、“导航菜单”、“主内容列”）来定义网站中的复合区域。

文档的基本组成部分

网页的外观多种多样，
但是除了全屏视频或游戏，或艺术作品页面，
或只是结构不当的页面以外，都倾向于使用类似的标准组件：

页眉
通常横跨于整个页面顶部有一个大标题 和/或 一个标志。 
这是网站的主要一般信息，通常存在于所有网页。

导航栏
指向网站各个主要区段的超链接。通常用菜单按钮、链接或标签页表示。
类似于标题栏，导航栏通常应在所有网页之间保持一致，否则会让用户感到疑惑，甚至无所适从。
许多 web 设计人员认为导航栏是标题栏的一部分，而不是独立的组件，但这并非绝对；
还有人认为，两者独立可以提供更好的 无障碍访问特性，因为屏幕阅读器可以更清晰地分辨二者。

主内容
中心的大部分区域是当前网页大多数的独有内容，
例如视频、文章、地图、新闻等。这些内容是网站的一部分，且会因页面而异。

侧边栏
一些外围信息、链接、引用、广告等。
通常与主内容相关（例如一个新闻页面上，侧边栏可能包含作者信息或相关文章链接），
还可能存在其他的重复元素，如辅助导航系统。
页脚
横跨页面底部的狭长区域。
和标题一样，页脚是放置公共信息（比如版权声明或联系方式）的，
一般使用较小字体，且通常为次要内容。 还可以通过提供快速访问链接来进行 SEO。
一个“典型的网站”可能会这样布局：

用于构建内容的 HTML
以上简单示例不是很精美，但是足够说明网站的典型布局方式了。
一些站点拥有更多列，其中一些远比这复杂，但一切在你掌握之中。
通过合适的CSS， 你可以使用相当多种的任意页面元素来环绕在不同的页面区域来做成你想要的样子，
但如前所述，我们要敬畏语义，做到正确选用元素。

这是因为视觉效果并不是一切。
我们可以修改最重要内容（例如导航菜单和相关链接）的颜色、字体大小来吸引用户的注意，
但是这对视障人士是无效的，“粉红色”和“大字体”对他们并不奏效。

HTML 代码中可根据功能来为区段添加标记。
可使用元素来无歧义地表示上文所讲的内容区段，
屏幕阅读器等辅助技术可以识别这些元素，并帮助执行“找到主导航 “或”找到主内容“等任务。

为了实现语义化标记，HTML 提供了明确这些区段的专用标签，例如：
<header>：页眉。
<nav>：导航栏。form搜索框
<main>：主内容。主内容中还可以有各种子内容区段，可用<article>、<section> 和 <div> 等元素表示。
<aside>：侧边栏，经常嵌套在 <main> 中。侧边栏在主内容右侧
<footer>：页脚。

HTML 布局元素细节
理解所有 HTML 区段元素具体含义是很有益处的，这一点将随着个人 web 开发经验的逐渐丰富日趋显现。
更多细节请查阅 HTML 元素参考。现在，你只需要理解以下主要元素的意义：

<main> 存放每个页面独有的内容。
每个页面上只能用一次 <main>，且直接位于 <body> 中。
最好不要把它嵌套进其它元素。
<section> 与 <article> 类似，
但 <section> 更适用于组织页面使其按功能（比如迷你地图、一组文章标题和摘要）分块。
一般的最佳用法是：以 标题 作为开头；
也可以把一篇 <article> 分成若干部分并分别置于不同的 <section> 中，
也可以把一个区段 <section> 分成若干部分并分别置于不同的 <article> 中，取决于上下文。
<aside> 包含一些间接信息（术语条目、作者简介、相关链接，等等）。
<header> 是简介形式的内容。
如果它是 <body> 的子元素，那么就是网站的全局页眉。
如果它是 <article> 或<section> 的子元素，那么它是这些部分特有的页眉（此 <header> 非彼 标题）。
<nav> 包含页面主导航功能。其中不应包含二级链接等内容。
<footer> 包含了页面的页脚部分。

无语义元素
有时你会发现，对于一些要组织的项目或要包装的内容，现有的语义元素均不能很好对应。
有时候你可能只想将一组元素作为一个单独的实体来修饰来响应单一的用 CSS 或 JavaScript。
为了应对这种情况，HTML提供了 <div> 和 <span> 元素。
应配合使用 class 属性提供一些标签，使这些元素能易于查询。

<span> 是一个内联的（inline）无语义元素，
最好只用于无法找到更好的语义元素来包含内容时，或者不想增加特定的含义时。例如：
<p>国王喝得酩酊大醉，在凌晨 1 点时才回到自己的房间，踉跄地走过门口。
  <span class="editor-note">[编辑批注：此刻舞台灯光应变暗]</span>.</p>

这里，“编辑批注”仅仅是对舞台剧导演提供额外指引；没有具体语义。
对于视力正常的用户，CSS 应将批注内容与主内容稍微隔开一些。

<div> 是一个块级无语义元素，应仅用于找不到更好的块级元素时，或者不想增加特定的意义时。
例如，一个电子商务网站页面上有一个一直显示的购物车组件。
<div class="shopping-cart">
  <h2>购物车</h2>
  <ul>
    <li>
      <p><a href=""><strong>银耳环</strong></a>：$99.95.</p>
      <img src="../products/3333-0985/" alt="Silver earrings">
    </li>
    <li>
      ...
    </li>
  </ul>
  <p>售价：$237.89</p>
</div>
这里不应使用 <aside>，因为它和主内容并没有必要的联系（你想在任何地方都能看到它）。
甚至不能用 <section> ，因为它也不是页面上主内容的一部分。
所以在这种情况下就应使用 <div>，为满足无障碍使用特征，还应为购物车的标题设置一个可读标签。

警告：<div> 非常便利但容易被滥用。
由于它们没有语义值，会使 HTML 代码变得混乱。
要小心使用，只有在没有更好的语义方案时才选择它，
而且要尽可能少用， 否则文档的升级和维护工作会非常困难。

换行与水平分割线
有时会用到 <br> 和 <hr> 两个元素，需要介绍一下
<br> 可在段落中进行换行；
<br> 是唯一能够生成多个短行结构（例如邮寄地址或诗歌）的元素。比如：
<p>从前有个人叫小高<br>
他说写 HTML 感觉最好<br>
但他写的代码结构语义一团糟<br>
他写的标签谁也懂不了。</p>
没有 <br> 元素，这段会直接显示在长长的一行中（如前文所讲，HTML会忽略大部分空格）；
使用 <br> 元素，才使得诗看上去像诗：
<hr> 元素在文档中生成一条水平分割线，表示文本中主题的变化（例如话题或场景的改变）。
一般就是一条水平的直线。例如：

<p>原来这唐僧是个慈悯的圣僧。
他见行者哀告，却也回心转意道：“既如此说，且饶你这一次。
再休无礼。如若仍前作恶，这咒语颠倒就念二十遍！”
行者道：“三十遍也由你，只是我不打人了。”
却才伏侍唐僧上马，又将摘来桃子奉上。
唐僧在马上也吃了几个，权且充饥。</p>
<hr>
<p>却说那妖精，脱命升空。
原来行者那一棒不曾打杀妖精，妖精出神去了
。他在那云端里，咬牙切齿，暗恨行者道：“几年只闻得讲他手段，今日果然话不虚传。
那唐僧已此不认得我，将要吃饭。若低头闻一闻儿，我就一把捞住，却不是我的人了。
不期被他走来，弄破我这勾当，又几乎被他打了一棒。若饶了这个和尚，诚然是劳而无功也。
我还下去戏他一戏。”</p>

规划一个简单的网站
在完成页面内容的规划后，一般应按部就班地规划整个网站的内容，
要可能带给用户最好的体验，需要哪些页面、
如何排列组合这些页面、如何互相链接等问题不可忽略。

这些工作称为信息架构。
在大型网站中，大多数规划工作都可以归结于此，而对于一个只有几个页面的简单网站，
规划设计过程可以更简单，更有趣！

时刻记住，大多数（不是全部）页面会使用一些相同的元素，例如导航菜单以及页脚内容。
若网站为商业站点，不妨在所有页面的页脚都加上联系方式。
请记录这些对所有页面都通用的内容：

接下来，可为页面结构绘制草图（这里与前文那个站点页面的截图类似）。记录每一块的作用：

下面，对于期望添加进站点的所有其它（通用内容以外的）内容展开头脑风暴，直接罗列出来。

下一步，试着对这些内容进行分组，这样可以让你了解哪些内容可以放在同一个页面。
这种做法和 卡片分类法 非常相似。

接下来，试着绘制一个站点地图的草图，使用一个气泡代表网站的一个页面，
并绘制连线来表示页面间的一般工作流。

主页面一般置于中心，且链接到其他大多数页面；
小型网站的大多数页面都可以从主页的导航栏中链接跳转。
也可记录下内容的显示方式。






